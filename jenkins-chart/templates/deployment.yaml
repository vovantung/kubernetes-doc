apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      dnsPolicy: ClusterFirst
      serviceAccountName: jenkins-sa  
      initContainers:
        - name: fix-permissions
          image: busybox
          command: ["sh", "-c", "chown -R 1000:1000 /var/jenkins_home"]
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home

        # - name: restore-from-minio
        #   image: vothinhuydt/jenkins-backup:txu
        #   securityContext:
        #     runAsUser: 1000
        #     runAsGroup: 1000
        #   command:
        #     - sh
        #     - -c
        #     - |
        #       echo "[init] Restoring Jenkins data..." && \
        #       export MC_CONFIG_DIR=/tmp/.mc && \
        #       mc alias set minio https://minio.txuapp.com $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY && \
        #       LATEST_FILE=$(mc ls minio/jenkins-data/ | grep -oE 'jenkins-[0-9]{14}\.tar\.gz' | sort | tail -n1) && \
        #       if [ -n "$LATEST_FILE" ]; then \
        #         echo "[init] Found $LATEST_FILE, downloading..." && \
        #         mc cp "minio/jenkins-data/$LATEST_FILE" /tmp/jenkins.tar.gz && \
        #         rm -rf /var/jenkins_home/* && \
        #         tar xzf /tmp/jenkins.tar.gz -C /var/jenkins_home; \
        #       else \
        #         echo "[init] No backup archive found."; \
        #       fi
        #   env:
        #     - name: AWS_ACCESS_KEY_ID
        #       valueFrom:
        #         secretKeyRef:
        #           name: minio-creds
        #           key: MINIO_ACCESS_KEY_ID
        #     - name: AWS_SECRET_ACCESS_KEY
        #       valueFrom:
        #         secretKeyRef:
        #           name: minio-creds
        #           key: MINIO_SECRET_ACCESS_KEY
        #   volumeMounts:
        #     - name: jenkins-home
        #       mountPath: /var/jenkins_home

      containers:
        - name: jenkins
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
              name: agent  
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home
          # lifecycle:
          #   preStop:
          #     exec:
          #       command:
          #         - sh
          #         - -c
          #         - |
          #           echo "[preStop] Backing up Jenkins before termination..." && \
          #           tar czf /var/jenkins_home/prestop-$(date +%Y%m%d%H%M%S).tar.gz -C /var/jenkins_home . && \
          #           aws --endpoint-url http://minio.minio.svc.cluster.local:9000 \
          #             s3 cp /var/jenkins_home/prestop-$(date +%Y%m%d%H%M%S).tar.gz \
          #             s3://jenkins-data/jenkins-$(date +%Y%m%d%H%M%S).tar.gz
          # env:
          #   - name: AWS_ACCESS_KEY_ID
          #     valueFrom:
          #       secretKeyRef:
          #         name: minio-creds
          #         key: MINIO_ACCESS_KEY_ID
          #   - name: AWS_SECRET_ACCESS_KEY
          #     valueFrom:
          #       secretKeyRef:
          #         name: minio-creds
          #         key: MINIO_SECRET_ACCESS_KEY
        - name: backup-to-minio
          image: vothinhuydt/jenkins-backup:txu
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: MINIO_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: MINIO_SECRET_ACCESS_KEY
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home
            - name: mc-config
              mountPath: /mc-config
          command:
            - sh
            - -c
            - |
              echo "[sidecar] Starting backup-to-minio"
              export MC_CONFIG_DIR=/mc-config
              mc alias set minio https://minio.txuapp.com $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
              while true; do
                echo "[sidecar] Performing hourly backup..." && \
                tar czf /tmp/jenkins.tar.gz --ignore-failed-read -C /var/jenkins_home . && \
                mc cp /tmp/jenkins.tar.gz minio/jenkins-data/jenkins-$(date +%Y%m%d%H%M%S).tar.gz && \
                sleep 3600;
              done

      volumes:
        - name: jenkins-home
          hostPath:
            path: /mnt/data/jenkins
            type: DirectoryOrCreate
        - name: mc-config
          emptyDir: {}    
